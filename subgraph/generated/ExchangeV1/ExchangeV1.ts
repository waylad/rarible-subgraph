// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get sellToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sellTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get buyTokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get buyValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get salt(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get sellToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sellTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get buyToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get buyTokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get salt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ExchangeV1__prepareBuyerFeeMessageInputOrderStruct extends ethereum.Tuple {
  get key(): ExchangeV1__prepareBuyerFeeMessageInputOrderKeyStruct {
    return this[0].toTuple() as ExchangeV1__prepareBuyerFeeMessageInputOrderKeyStruct;
  }

  get selling(): BigInt {
    return this[1].toBigInt();
  }

  get buying(): BigInt {
    return this[2].toBigInt();
  }

  get sellerFee(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExchangeV1__prepareBuyerFeeMessageInputOrderKeyStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get salt(): BigInt {
    return this[1].toBigInt();
  }

  get sellAsset(): ExchangeV1__prepareBuyerFeeMessageInputOrderKeySellAssetStruct {
    return this[2].toTuple() as ExchangeV1__prepareBuyerFeeMessageInputOrderKeySellAssetStruct;
  }

  get buyAsset(): ExchangeV1__prepareBuyerFeeMessageInputOrderKeyBuyAssetStruct {
    return this[3].toTuple() as ExchangeV1__prepareBuyerFeeMessageInputOrderKeyBuyAssetStruct;
  }
}

export class ExchangeV1__prepareBuyerFeeMessageInputOrderKeySellAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeV1__prepareBuyerFeeMessageInputOrderKeyBuyAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeV1__prepareMessageInputOrderStruct extends ethereum.Tuple {
  get key(): ExchangeV1__prepareMessageInputOrderKeyStruct {
    return this[0].toTuple() as ExchangeV1__prepareMessageInputOrderKeyStruct;
  }

  get selling(): BigInt {
    return this[1].toBigInt();
  }

  get buying(): BigInt {
    return this[2].toBigInt();
  }

  get sellerFee(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExchangeV1__prepareMessageInputOrderKeyStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get salt(): BigInt {
    return this[1].toBigInt();
  }

  get sellAsset(): ExchangeV1__prepareMessageInputOrderKeySellAssetStruct {
    return this[2].toTuple() as ExchangeV1__prepareMessageInputOrderKeySellAssetStruct;
  }

  get buyAsset(): ExchangeV1__prepareMessageInputOrderKeyBuyAssetStruct {
    return this[3].toTuple() as ExchangeV1__prepareMessageInputOrderKeyBuyAssetStruct;
  }
}

export class ExchangeV1__prepareMessageInputOrderKeySellAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeV1__prepareMessageInputOrderKeyBuyAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeV1 extends ethereum.SmartContract {
  static bind(address: Address): ExchangeV1 {
    return new ExchangeV1("ExchangeV1", address);
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  buyerFeeSigner(): Address {
    let result = super.call("buyerFeeSigner", "buyerFeeSigner():(address)", []);

    return result[0].toAddress();
  }

  try_buyerFeeSigner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "buyerFeeSigner",
      "buyerFeeSigner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc20TransferProxy(): Address {
    let result = super.call(
      "erc20TransferProxy",
      "erc20TransferProxy():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_erc20TransferProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc20TransferProxy",
      "erc20TransferProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ordersHolder(): Address {
    let result = super.call("ordersHolder", "ordersHolder():(address)", []);

    return result[0].toAddress();
  }

  try_ordersHolder(): ethereum.CallResult<Address> {
    let result = super.tryCall("ordersHolder", "ordersHolder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  prepareBuyerFeeMessage(
    order: ExchangeV1__prepareBuyerFeeMessageInputOrderStruct,
    fee: BigInt
  ): string {
    let result = super.call(
      "prepareBuyerFeeMessage",
      "prepareBuyerFeeMessage(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256),uint256):(string)",
      [ethereum.Value.fromTuple(order), ethereum.Value.fromUnsignedBigInt(fee)]
    );

    return result[0].toString();
  }

  try_prepareBuyerFeeMessage(
    order: ExchangeV1__prepareBuyerFeeMessageInputOrderStruct,
    fee: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "prepareBuyerFeeMessage",
      "prepareBuyerFeeMessage(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256),uint256):(string)",
      [ethereum.Value.fromTuple(order), ethereum.Value.fromUnsignedBigInt(fee)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  prepareMessage(order: ExchangeV1__prepareMessageInputOrderStruct): string {
    let result = super.call(
      "prepareMessage",
      "prepareMessage(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256)):(string)",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toString();
  }

  try_prepareMessage(
    order: ExchangeV1__prepareMessageInputOrderStruct
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "prepareMessage",
      "prepareMessage(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256)):(string)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  state(): Address {
    let result = super.call("state", "state():(address)", []);

    return result[0].toAddress();
  }

  try_state(): ethereum.CallResult<Address> {
    let result = super.tryCall("state", "state():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferProxy(): Address {
    let result = super.call("transferProxy", "transferProxy():(address)", []);

    return result[0].toAddress();
  }

  try_transferProxy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferProxy",
      "transferProxy():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferProxyForDeprecated(): Address {
    let result = super.call(
      "transferProxyForDeprecated",
      "transferProxyForDeprecated():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_transferProxyForDeprecated(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "transferProxyForDeprecated",
      "transferProxyForDeprecated():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _transferProxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _transferProxyForDeprecated(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _erc20TransferProxy(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _state(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _ordersHolder(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _buyerFeeSigner(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get key(): CancelCallKeyStruct {
    return this._call.inputValues[0].value.toTuple() as CancelCallKeyStruct;
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelCallKeyStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get salt(): BigInt {
    return this[1].toBigInt();
  }

  get sellAsset(): CancelCallKeySellAssetStruct {
    return this[2].toTuple() as CancelCallKeySellAssetStruct;
  }

  get buyAsset(): CancelCallKeyBuyAssetStruct {
    return this[3].toTuple() as CancelCallKeyBuyAssetStruct;
  }
}

export class CancelCallKeySellAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class CancelCallKeyBuyAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeCall extends ethereum.Call {
  get inputs(): ExchangeCall__Inputs {
    return new ExchangeCall__Inputs(this);
  }

  get outputs(): ExchangeCall__Outputs {
    return new ExchangeCall__Outputs(this);
  }
}

export class ExchangeCall__Inputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }

  get order(): ExchangeCallOrderStruct {
    return this._call.inputValues[0].value.toTuple() as ExchangeCallOrderStruct;
  }

  get sig(): ExchangeCallSigStruct {
    return this._call.inputValues[1].value.toTuple() as ExchangeCallSigStruct;
  }

  get buyerFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get buyerFeeSig(): ExchangeCallBuyerFeeSigStruct {
    return this._call.inputValues[3].value.toTuple() as ExchangeCallBuyerFeeSigStruct;
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get buyer(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ExchangeCall__Outputs {
  _call: ExchangeCall;

  constructor(call: ExchangeCall) {
    this._call = call;
  }
}

export class ExchangeCallOrderStruct extends ethereum.Tuple {
  get key(): ExchangeCallOrderKeyStruct {
    return this[0].toTuple() as ExchangeCallOrderKeyStruct;
  }

  get selling(): BigInt {
    return this[1].toBigInt();
  }

  get buying(): BigInt {
    return this[2].toBigInt();
  }

  get sellerFee(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExchangeCallOrderKeyStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get salt(): BigInt {
    return this[1].toBigInt();
  }

  get sellAsset(): ExchangeCallOrderKeySellAssetStruct {
    return this[2].toTuple() as ExchangeCallOrderKeySellAssetStruct;
  }

  get buyAsset(): ExchangeCallOrderKeyBuyAssetStruct {
    return this[3].toTuple() as ExchangeCallOrderKeyBuyAssetStruct;
  }
}

export class ExchangeCallOrderKeySellAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeCallOrderKeyBuyAssetStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get assetType(): i32 {
    return this[2].toI32();
  }
}

export class ExchangeCallSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class ExchangeCallBuyerFeeSigStruct extends ethereum.Tuple {
  get v(): i32 {
    return this[0].toI32();
  }

  get r(): Bytes {
    return this[1].toBytes();
  }

  get s(): Bytes {
    return this[2].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBeneficiaryCall extends ethereum.Call {
  get inputs(): SetBeneficiaryCall__Inputs {
    return new SetBeneficiaryCall__Inputs(this);
  }

  get outputs(): SetBeneficiaryCall__Outputs {
    return new SetBeneficiaryCall__Outputs(this);
  }
}

export class SetBeneficiaryCall__Inputs {
  _call: SetBeneficiaryCall;

  constructor(call: SetBeneficiaryCall) {
    this._call = call;
  }

  get newBeneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBeneficiaryCall__Outputs {
  _call: SetBeneficiaryCall;

  constructor(call: SetBeneficiaryCall) {
    this._call = call;
  }
}

export class SetBuyerFeeSignerCall extends ethereum.Call {
  get inputs(): SetBuyerFeeSignerCall__Inputs {
    return new SetBuyerFeeSignerCall__Inputs(this);
  }

  get outputs(): SetBuyerFeeSignerCall__Outputs {
    return new SetBuyerFeeSignerCall__Outputs(this);
  }
}

export class SetBuyerFeeSignerCall__Inputs {
  _call: SetBuyerFeeSignerCall;

  constructor(call: SetBuyerFeeSignerCall) {
    this._call = call;
  }

  get newBuyerFeeSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBuyerFeeSignerCall__Outputs {
  _call: SetBuyerFeeSignerCall;

  constructor(call: SetBuyerFeeSignerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
